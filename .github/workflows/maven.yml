# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven/Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

    - name: Login to Docker Aliyun
      uses: docker/login-action@v2
      with:
        registry: registry.cn-hangzhou.aliyuncs.com
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_REPOSITORY }}:latest

  pull-docker:
      needs: [build]
      name: Pull Docker
      runs-on: ubuntu-latest
      steps:
        - name: Deploy
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.HOST }}
            username: ${{ secrets.HOST_USERNAME }}
            password: ${{ secrets.HOST_PASSWORD }}
            port: ${{ secrets.HOST_PORT }}
            script: |
              docker stop $(docker ps --filter ancestor=${{ secrets.DOCKER_REPOSITORY }} -q)
              docker rm -f $(docker ps -a --filter ancestor=${{ secrets.DOCKER_REPOSITORY }}:latest -q)
              docker rmi -f $(docker images ${{ secrets.DOCKER_REPOSITORY }}:latest -q)
              docker login --username=${{ secrets.DOCKER_USERNAME }} --password ${{ secrets.DOCKER_PASSWORD }} ${{ secrets.DOCKER_REPOSITORY }}
              docker pull ${{ secrets.DOCKER_REPOSITORY }}:latest
              docker run -d --name mlb-gateway -p 8000:8080 -e NACOS_SERVER=${{secrets.NACOS_SERVER}} ${{ secrets.DOCKER_REPOSITORY }}:latest